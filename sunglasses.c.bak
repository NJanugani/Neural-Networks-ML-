#include <stdio.h>
#include <math.h>
#include <pgm.h>
#include <bpnn.h>

extern char *strcpy();
extern void exit();
char* stri[2] = {"open","sunglasses"};
int totalcounter = 0;
int counter = 0;
double x=0;
double y=0;
main(argc, argv)
int argc;
char *argv[];
{
  char netname[256], trainname[256], test1name[256], test2name[256];
  IMAGELIST *trainlist, *test1list, *test2list;
  int ind, epochs, seed, savedelta, list_errors;
  seed = 102194; 
  epochs = 100;
  savedelta = 100;
  list_errors = 0;
  netname[0] = trainname[0] = test1name[0] = test2name[0] = '\0';
  /*** Create imagelists ***/
  trainlist = imgl_alloc();
  test1list = imgl_alloc();
  test2list = imgl_alloc();

strcpy(netname, argv[1]);
strcpy(trainname, argv[2]);
strcpy(test1name, argv[3]);
strcpy(test2name, argv[4]);
epochs = atoi(argv[5]);

imgl_load_images_from_textfile(trainlist, trainname);
imgl_load_images_from_textfile(test1list, test1name);
imgl_load_images_from_textfile(test2list, test2name);
  /*** Initialize the neural net package ***/
  bpnn_initialize(seed);
  /*** If we've got at least one image to train on, go train the net ***/
  backprop_face(trainlist, test1list, test2list, epochs, savedelta, netname,
		list_errors);

  exit(0);
}


backprop_face(trainlist, test1list, test2list, epochs, savedelta, netname,
	      list_errors)
IMAGELIST *trainlist, *test1list, *test2list;
int epochs, savedelta, list_errors;
char *netname;
{
  IMAGE *iimg;
  BPNN *net;
  int train_n, epoch, i, imgsize;
  double out_err, hid_err, sumerr;

  train_n = trainlist->n;

  /*** Read network in if it exists, otherwise make one from scratch ***/
  if ((net = bpnn_read(netname)) == NULL) {
    if (train_n > 0) {
      iimg = trainlist->list[0];
      imgsize = ROWS(iimg) * COLS(iimg);
      net = bpnn_create(imgsize, 4, 1);
    } 
  }

  /*** Print out performance before any epochs have been completed. ***/
  performance_on_imagelist(net, trainlist, 0);
  performance_on_imagelist(net, test1list, 0);
  performance_on_imagelist(net, test2list, 0);
  printf("\n");  
  fflush(stdout);
  /************** Train it *****************************/
  for (epoch = 1; epoch <= epochs; epoch++) {
 
    fflush(stdout);
    sumerr = 0.0;
    for (i = 0; i < train_n; i++) {

      /** Set up input units on net with image i **/
      load_input_with_image(trainlist->list[i], net);
      /** Set up target vector for image i **/
      load_target(trainlist->list[i], net);
      /** Run backprop, learning rate 0.3, momentum 0.3 **/
      bpnn_train(net, 0.3, 0.3, &out_err, &hid_err);
      sumerr += (out_err + hid_err);
    }
    /*** Evaluate performance on train, test, test2, and print perf ***/
    performance_on_imagelist(net, trainlist, 0);
    if(epoch==epochs)
      printf("trainlist accuracy = %g  trainlist error = %g\n",x,y);
    performance_on_imagelist(net, test1list, 0);
      if(epoch==epochs)
      printf("test1list accuracy = %g  test1list error = %g\n",x,y);
    performance_on_imagelist(net, test2list, 0);
      if(epoch==epochs)
      printf("test2list accuracy = %g  test2list error = %g\n",x,y); 
    fflush(stdout);

  }
  printf("\n"); 
  fflush(stdout);
  /** Save the trained network **/
  if (epochs > 0) {
    bpnn_save(net, netname);
  }
  printout(net, test1list);
  printout(net, test2list);
  printf("%g\n",(((double)counter)/totalcounter)*100 );  
}
/*** Computes the performance of a net on the images in the imagelist. ***/
/*** Prints out the percentage correct on the image set, and the
     average error between the target and the output units for the set. ***/
performance_on_imagelist(net, il, list_errors)
BPNN *net;
IMAGELIST *il;
int list_errors;
{
  double err, val;
  int i, n, j, correct;
  err = 0.0;
  correct = 0;
  n = il->n;
  if (n > 0) {
    for (i = 0; i < n; i++) {
      /*** Load the image into the input layer. **/
      load_input_with_image(il->list[i], net);
      /*** Run the net on this input. **/
      bpnn_feedforward(net);
      /*** Set up the target vector for this image. **/
      load_target(il->list[i], net);
      /*** See if it got it right. ***/
      if (evaluate_performance(net, &val, 0)) {
        correct++;
      }
      err += val;
    }
    err = err / (double) n;
      x = ((double) correct / (double) n) * 100.0;
      y = err;
  } else {
    if (!list_errors)
      printf("0.0 0.0 ");
  }
}

evaluate_performance(net, err)
BPNN *net;
double *err;
{
  double delta;
  *err=0;
  int i;
  for(i=1;i<21;i++)
  {
  delta = net->target[i] - net->output_units[i];

  *err += (0.5 * delta * delta);
  } 
  int max=0;
  double mx=0;
  int mx_ind=0;
  for(i=1;i<3;i++)
  {
    if(net->target[i] == 0.9)
    {
        max=i;
        break;
    }
  }
  for(i=1;i<3;i++)
  {
    if(net->output_units[i]>mx)
    {
      mx = net->output_units[i];
      mx_ind=i;
    }
  }
  if(max==mx_ind)
    return 1;
  return 0;
}

printout(net, il)
BPNN *net;
IMAGELIST *il;
{
  int i, n, j, correct;
  n = il->n;
  if (n > 0) {
    for (i = 0; i < n; i++) {
      /*** Load the image into the input layer. **/
      load_input_with_image(il->list[i], net);
      /*** Run the net on this input. **/
      bpnn_feedforward(net);
      /*** Set up the target vector for this image. **/
      load_target(il->list[i], net);
      j=0;
      double mx=0;
      int mx_ind=0;
      for(j=1;j<3;j++)
        {
          if(net->output_units[j]>mx)
          {
            mx = net->output_units[j];
            mx_ind=j;
          }
        }
       int ind=0;
       for(j=1;j<3;j++)
       if(net->target[j]==0.9)
       ind=j;
        printf("target = %s and output = %s\n",stri[ind-1],stri[mx_ind-1]);
        if(ind == mx_ind)
          counter++;
        totalcounter++;
    }
  }      
}